from logic import DB_Manager
from config import *
from telebot import TeleBot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telebot import types

bot = TeleBot(TOKEN)
hideBoard = types.ReplyKeyboardRemove() 

cancel_button = "–û—Ç–º–µ–Ω–∞ üö´"
def cansel(message):
    bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–π - /info", reply_markup=hideBoard)
  
def no_notes(message):
    bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π!\n–ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö —Å –ø–æ–º–æ—à—å—é –∫–æ–º–∞–Ω–¥—ã /new_note')

def gen_inline_markup(rows):
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    for row in rows:
        markup.add(InlineKeyboardButton(row, callback_data=row))
    return markup

def gen_markup(rows):
    markup = ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.row_width = 1
    for row in rows:
        markup.add(KeyboardButton(row))
    markup.add(KeyboardButton(cancel_button))
    return markup

attributes_of_notes = {'–ò–º—è –∑–∞–ø–∏—Å–∏' : ["–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞", "note_name"],
                          '–î–∞—Ç–∞' : ["–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏", "date"],
                          "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ" : ["–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–Ω–µ–≤–Ω–∏–∫–∞", "soda"],
                          "–°—Ç–∞—Ç—É—Å" : ["–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏", "status_id"]}

def info_note(message, user_id, note_name):
    info = manager.get_note_info(user_id, note_name)[0]
    themes = manager.get_note_themes(note_name)
    if not themes:
        themes = '–ù–∞–≤—ã–∫–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã'
    bot.send_message(message.chat.id, f"""Note name: {info[0]}
Date: {info[1]}
themes: {themes}
status: {info[3]}
Content: {info[2]}

""")

@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(message.chat.id, """–ü—Ä–∏–≤–µ—Ç!üëã –Ø –±–æ—Ç-–¥–Ω–µ–≤–Ω–∏–∫!
–ü–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ–∏ –∑–∞–ø–∏—Å–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö!üëå
–ó–∞–±—ã–ª –∫–Ω–∏–∂–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫? –•–æ—á–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º, –≤–º–µ—Å—Ç–æ –∑–∞–º–µ—Ç–æ–∫? –≠—Ç–æ—Ç –±–æ—Ç –¥–ª—è –≤–∞—Å!‚úîÔ∏è
–¢–µ–º—ã, –¥–∞—Ç–∞, –¥–∞–∂–µ —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ –∑–¥–µ—Å—å –µ—Å—Ç—å!‚ùó
""")
    bot.send_photo(message.chat.id, open("images/dnevnik.png", "rb"))
    info(message)
    
@bot.message_handler(commands=['info'])
def info(message):
    bot.send_message(message.chat.id,
"""
–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ç–µ–±–µ –ø–æ–º–æ—á—å:

/new_note - —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º
/notes - –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞
/update_notes - –∏–∑–º–µ–Ω—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∫–æ–π-–ª–∏–±–æ –∑–∞–ø–∏—Å–∏
/themes - –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Ç–µ–º—ã –¥–ª—è –∑–∞–ø–∏—Å–µ–π
/delete - —É–¥–∞–ª—è–µ—Ç –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å –∑–∞–ø–∏—Å—å

–¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ –∏–º—è –∑–∞–ø–∏—Å–∏ –∏ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π!""")
    

@bot.message_handler(commands=['new_note'])
def addtask_command(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏1Ô∏è‚É£:")
    bot.register_next_step_handler(message, name_note)

def name_note(message):
    name = message.text
    user_id = message.from_user.id
    data = [user_id, name]
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–ø–∏—Å–∏2Ô∏è‚É£:")
    bot.register_next_step_handler(message, status_note, data=data)

def status_note(message, data):
    data.append(message.text)
    statuses = [x[0] for x in manager.get_statuses()] 
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ (–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)3Ô∏è‚É£:", reply_markup=gen_markup(statuses))
    bot.register_next_step_handler(message, callback_note, data=data, statuses=statuses)

def callback_note(message, data, statuses):
    status = message.text
    if message.text == cancel_button:
        cansel(message)
        return
    if status not in statuses:
        bot.send_message(message.chat.id, "–¢—ã –≤—ã–±—Ä–∞–ª —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑‚ùå!)", reply_markup=gen_markup(statuses))
        bot.register_next_step_handler(message, callback_note, data=data, statuses=statuses)
        return
    status_id = manager.get_status_id(status)
    data.append(status_id)
    manager.insert_note([tuple(data)])
    bot.send_message(message.chat.id, "–ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω‚úîÔ∏è!")


@bot.message_handler(commands=['themes'])
def skill_handler(message):
    user_id = message.from_user.id
    notes = manager.get_notes(user_id)
    if notes:
        notes = [x[2] for x in notes]
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–≤—ã–∫1Ô∏è‚É£:', reply_markup=gen_markup(notes))
        bot.register_next_step_handler(message, genre_note, notes=notes)
    else:
        no_notes(message)


def genre_note(message, notes):
    note_name = message.text
    if message.text == cancel_button:
        cansel(message)
        return
        
    if note_name not in notes:
        bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑‚ùå! –í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–≤—ã–∫.', reply_markup=gen_markup(notes))
        bot.register_next_step_handler(message, genre_note, notes=notes)
    else:
        genre = [x[1] for x in manager.get_themes()]
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –Ω–∞–≤—ã–∫2Ô∏è‚É£:', reply_markup=gen_markup(genre))
        bot.register_next_step_handler(message, set_genre, note_name=note_name, skills=genre)

def set_genre(message, note_name, skills):
    skill = message.text
    user_id = message.from_user.id
    if message.text == cancel_button:
        cansel(message)
        return
        
    if skill not in skills:
        bot.send_message(message.chat.id, '–í–∏–¥–∏–º–æ, —Ç—ã –≤—ã–±—Ä–∞–ª –Ω–∞–≤—ã–∫. –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!) –í—ã–±–µ—Ä–∏ –Ω–∞–≤—ã–∫', reply_markup=gen_markup(skills))
        bot.register_next_step_handler(message, set_genre, note_name=note_name, skills=skills)
        return
    manager.insert_themes(user_id, note_name, skill )
    bot.send_message(message.chat.id, f'–ù–∞–≤—ã–∫ {skill} –¥–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–µ–∫—Ç—É‚úîÔ∏è {note_name}')


@bot.message_handler(commands=['notes'])
def get_notes(message):
    user_id = message.from_user.id
    notes = manager.get_notes(user_id)
    if notes:
        text = "\n".join([f"note name:{x[2]} \nContent:{x[4]}\n" for x in notes])
        bot.send_message(message.chat.id, text, reply_markup=gen_inline_markup([x[2] for x in notes]))
    else:
        no_notes(message)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    note_name = call.data
    info_note(call.message, call.from_user.id, note_name)


@bot.message_handler(commands=['delete'])
def delete_handler(message):
    user_id = message.from_user.id
    notes = manager.get_notes(user_id)
    if notes:
        text = "\n".join([f"note name:{x[2]} \nContent:{x[4]}\n" for x in notes])
        notes = [x[2] for x in notes]
        bot.send_message(message.chat.id, text, reply_markup=gen_markup(notes))
        bot.register_next_step_handler(message, delete_note, notes=notes)
    else:
        no_notes(message)

def delete_note(message, notes):
    note = message.text
    user_id = message.from_user.id

    if message.text == cancel_button:
        cansel(message)
        return
    if note not in notes:
        bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑‚ùå!', reply_markup=gen_markup(notes))
        bot.register_next_step_handler(message, delete_note, notes=notes)
        return
    note_id = manager.get_note_id(note, user_id)
    manager.delete_note(user_id, note_id)
    bot.send_message(message.chat.id, f'–ü—Ä–æ–µ–∫—Ç {note} —É–¥–∞–ª–µ–Ω‚ùó‚úîÔ∏è!')


@bot.message_handler(commands=['update_notes'])
def update_note(message):
    user_id = message.from_user.id
    notes = manager.get_notes(user_id)
    if notes:
        notes = [x[2] for x in notes]
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å1Ô∏è‚É£:", reply_markup=gen_markup(notes))
        bot.register_next_step_handler(message, update_note_step_2, notes=notes )
    else:
        no_notes(message)

def update_note_step_2(message, notes):
    note_name = message.text
    if message.text == cancel_button:
        cansel(message)
        return
    if note_name not in notes:
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚ùå! –í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –µ—â–µ —Ä–∞–∑:", reply_markup=gen_markup(notes))
        bot.register_next_step_handler(message, update_note_step_2, notes=notes )
        return
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ2Ô∏è‚É£:", reply_markup=gen_markup(attributes_of_notes.keys()))
    bot.register_next_step_handler(message, update_note_step_3, note_name=note_name)

def update_note_step_3(message, note_name):
    attribute = message.text
    reply_markup = None 
    if message.text == cancel_button:
        cansel(message)
        return
    if attribute not in attributes_of_notes.keys():
        bot.send_message(message.chat.id, "–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –æ—à–∏–±—Å—è, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑‚ùå!)", reply_markup=gen_markup(attributes_of_notes.keys()))
        bot.register_next_step_handler(message, update_note_step_3, note_name=note_name)
        return
    elif attribute == "–°—Ç–∞—Ç—É—Å":
        rows = manager.get_statuses()
        reply_markup=gen_markup([x[0] for x in rows])
    bot.send_message(message.chat.id, attributes_of_notes[attribute][0], reply_markup = reply_markup)
    bot.register_next_step_handler(message, update_note_step_4, note_name=note_name, attribute=attributes_of_notes[attribute][1])

def update_note_step_4(message, note_name, attribute): 
    update_info = message.text
    if attribute== "status_id":
        rows = manager.get_statuses()
        if update_info in [x[0] for x in rows]:
            update_info = manager.get_status_id(update_info)
        elif update_info == cancel_button:
            cansel(message)
        else:
            bot.send_message(message.chat.id, "–ë—ã–ª –≤—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑‚ùå!)", reply_markup=gen_markup([x[0] for x in rows]))
            bot.register_next_step_handler(message, update_note_step_4, note_name=note_name, attribute=attribute)
            return
    user_id = message.from_user.id
    data = (update_info, note_name, user_id)
    manager.update_notes(attribute, data)
    bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ‚úîÔ∏è! –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã‚úîÔ∏è!)")


@bot.message_handler(func=lambda message: True)
def text_handler(message):
    user_id = message.from_user.id
    notes =[ x[2] for x in manager.get_notes(user_id)]
    note = message.text
    if note in notes:
        info_note(message, user_id, note)
        return
    bot.reply_to(message, "–¢–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å‚ù§Ô∏è?")
    info(message)

    
if __name__ == '__main__':
    manager = DB_Manager(DATABASE)
    bot.infinity_polling()
